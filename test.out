#defq(a, 1) ==> 1
#defq(b, 2) ==> 2
#defq(c, #lt(a, b)) ==> #t
#plus(a, b) ==> 3
#plus(a, b) ==> 3
#plus(a, b) ==> 3
#if(c, a, b) ==> 1
#defq(factorial, #lambda(#(n), #if(#lt(n, 2), 1, #times(n, factorial(#minus(n, 1)))))) ==> #closure0(
  args: #(n)
  body: #(#if(#lt(n, 2), 1, #times(n, factorial(#minus(n, 1)))))
) 
factorial(10) ==> 3628800
#defq(ft, #lambda(#(a, b), #defq(c, a), #defq(d, b), #plus(c, d))) ==> #closure0(
  args: #(a, b)
  body: #(#defq(c, a), #defq(d, b), #plus(c, d))
) 
ft(50, 5) ==> 55
#defq(v, #vector(7, 8, "hello")) ==> [ 
  7,
  8,
  "hello"
] 
#ref(v, 0) ==> 7
#ref(v, 2) ==> "hello"
#defq(aa, #assoc(one: 1, two: 2, three: 3)) ==> { 
  one : 1,
  three : 3,
  two : 2
} 
#defq(ix, #quote(two)) ==> two
#ref(aa, #quote(one)) ==> 1
#ref(aa, ix) ==> 2
#ref(aa, #quote(three)) ==> 3
#refq(aa, one) ==> 1
#refq(aa, two) ==> 2
#refq(aa, three) ==> 3
#amp(aa, #assoc(two: "TWO")) ==> error; list & not yet implemented: { 
  one : 1,
  three : 3,
  two : 2
} 
#void
#vector(3: 99, 0: "test") ==> [ 
  "test",
  #(),
  #(),
  99
] 
#defq(list, #(1, 2, 3)) ==> #(1, 2, 3)
#ref(list, 0) ==> 1
#refq(list, 0) ==> 1
#amp("abc", "def") ==> "abcdef"
#ref("abcdef", 2) ==> "c"
#defq(array1, #vector(1, 2, 3, 4, 5, 6)) ==> [ 
  1,
  2,
  3,
  4,
  5,
  6
] 
#ref(array1, 0) ==> 1
#ref(array1, 3) ==> 4
#ref(array1, 3 .. 4) ==> [ 
  4,
  5
] 
#defq(j, 15) ==> 15
#defq(f, #defq(g, 9)) ==> 9
#plus(g, f, 12) ==> 30
#minus(#plus(g, f, 12), 30) ==> 0
error at 66:2; bad character, ignored: "^"
2 ==> 2
#quotient(100, 2, 2) ==> 25
undefined ==> #undefined
#defq(io, #use("io")) ==> { 
  getline : #cfun0(),
  print : #cfunN(),
  println : #cfunN(),
  read : #cfun0(),
  write : #cfunN()
} 
#defq(text1, "ECHO") ==> "ECHO"
#defq(text2, "DELTA") ==> "DELTA"
#defq(invoke, #lambda(#(fn), #defq(text1, "BOB"), #defq(text2, "CAROLINE"), fn(), text2)) ==> #closure0(
  args: #(fn)
  body: #(#defq(text1, "BOB"), #defq(text2, "CAROLINE"), fn(), text2)
) 
invoke(#lambda(#(), #refq(io, println)("case 1 is ", text1, " and ", text2))) ==> case 1 is ECHO and DELTA
"CAROLINE"
#defq(func, #lambda(#(), #defq(text1, "ALICE"), invoke(#lambda(#(), #refq(io, println)("case 2 is ", text1, " and ", text2))))) ==> #closure0(
  args: #()
  body: #(#defq(text1, "ALICE"), invoke(#lambda(#(), #refq(io, println)("case 2 is ", text1, " and ", text2))))
) 
func() ==> case 2 is ALICE and DELTA
"CAROLINE"
#lambda(#(text2), invoke(#lambda(#(), #refq(io, println)("case 3 is ", text1, " and ", text2))))("ZZZ") ==> case 3 is ECHO and ZZZ
"CAROLINE"
#quotient(12, -4) ==> -3
#times(12345678.901234, 100000) ==> 1234567890123.4
#plus(#quotient(1, 2), #quotient(1, 3)) ==> 5/6
#plus(#quotient(1.0, 2), #quotient(1, 3)) ==> 0.833333333333333
#minus(#quotient(1, 2), 0.5) ==> 0.0
#defq(m, #use("math")) ==> { 
  abs : #cfun1(),
  acos : #cfun1(),
  asin : #cfun1(),
  atan : #cfun1(),
  atan2 : #cfun2(),
  ceil : #cfun1(),
  cos : #cfun1(),
  div : #cfun2(),
  e : 2.71828182845905,
  floor : #cfun1(),
  int : #cfun1(),
  log : #cfun1(),
  log10 : #cfun1(),
  mod : #cfun2(),
  pi : 3.14159265358979,
  pow : #cfun2(),
  sin : #cfun1(),
  sqrt : #cfun1(),
  tan : #cfun1()
} 
#refq(m, sqrt)(2) ==> 1.4142135623731
#refq(m, sqrt)(-2) ==> error; no real square root
#void
#refq(m, e) ==> 2.71828182845905
#refq(m, sin)(#quotient(#refq(m, pi), 2)) ==> 1.0
#refq(m, tan)(#quotient(#refq(m, pi), 4)) ==> 1.0
#refq(m, tan)(#quotient(#refq(m, pi), 2)) ==> 1.63312393531954e+16
#refq(m, atan)(9999999999999) ==> 1.5707963267948
#refq(m, pow)(10, 9) ==> 1000000000.0
#refq(m, pow)(10, 90) ==> 1e+90.0
#refq(m, pow)(10, 900) ==> error; pow out of range
#void
#refq(m, pow)(-10, 9) ==> -1000000000.0
#refq(m, pow)(10, -9) ==> 1e-09.0
#refq(m, abs)(-12.34) ==> 12.34
#refq(m, abs)(-12) ==> 12
#refq(m, abs)(#minus(#quotient(12, 34))) ==> 6/17
#refq(m, int)(12.1) ==> 12
#refq(m, int)(12.6) ==> 13
#refq(m, int)(-12.1) ==> -12
#refq(m, int)(-12.6) ==> -13
#refq(m, int)(#quotient(10, 3)) ==> 3
#refq(m, int)(#quotient(11, 3)) ==> 4
#lt("a", "b", "c") ==> #t
#lt("aa", "a") ==> #f
#lt("b", "a", "x") ==> #f
#defq(as, "abc") ==> "abc"
#defq(al, #(1, 2, 3)) ==> #(1, 2, 3)
#defq(av, #vector(1, 2, 3)) ==> [ 
  1,
  2,
  3
] 
#ref(as, 2 .. #()) ==> "c"
#ref(al, 2 .. #()) ==> #(3)
#ref(av, 2 .. #()) ==> [ 
  3
] 
#ref(as, 3 .. #()) ==> ""
#ref(al, 3 .. #()) ==> #()
#ref(av, 3 .. #()) ==> [ 
] 
#ref(as, 4 .. #()) ==> error; string range out of bounds: 4
#void
#ref(al, 4 .. #()) ==> error; list index out of bounds: 4
#void
#ref(av, 4 .. #()) ==> error; vector range out of bounds: 4
#void
#ref(as, 2 .. 2) ==> "c"
#ref(al, 2 .. 2) ==> #(3)
#ref(av, 2 .. 2) ==> [ 
  3
] 
#ref(as, 2 .. 3) ==> error; string range out of bounds: 3
#void
#ref(al, 2 .. 3) ==> error; list range out of bounds: 3
#void
#ref(av, 2 .. 3) ==> error; vector range out of bounds: 3
#void
#ref(as, 3 .. 3) ==> error; string range out of bounds: 3
#void
#ref(al, 3 .. 3) ==> error; list range out of bounds: 3
#void
#ref(av, 3 .. 3) ==> error; vector range out of bounds: 3
#void
