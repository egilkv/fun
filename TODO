
Quote should be on both sides.

[] should continue parsing...

Functions within assocs must be able to refer to their own assoc

|-operator is for replacements, so somewhat related to &.

How to deal with io not being pure functions?

Lists and assocs can also be used for functions. Skip [] operator.

[] is NIL, maybe also {} ??
Delay creation of assoc list

Lists and vectors are the same, so drop lists (make it up to runtime to switch)

Invocations of eval still uses C stack, so still not proper end recursion

DO not have pair as a data type using :. Instead, : is a label data type (left side quoted).

Possibly implement semicolon as operator like C comma operator
Needs some refinement for sure

When array and assoc initialization is Json style,
how to separate a {} block in a program from an initialized assoc?

Json keys are always strings. Reserved names and types:
    null, true, false
    signed decimal number, including floats
    string
    array [] and comma-separated elements.
    associative array

{} is an empty assoc?
What is the difference between (){} for function and {} for assoc, really.
Try to nullify it. So in addition to { a : b }, we can also have { a }
which means? And { a ; b }

The & operator can update values in assocs? Probably | is better! What about vectors?

Fully implement function call without use of C stack

Implement non-mutable 'variables'

Function invocation and lists should be separate things. Really

TODO allow for byte order mark and other Unicode stuff in reader

Assoc keys can be symbols, integers. Or strings?

Have === operator in addition to ==, to require more equality of sorts

In Scheme, 'display' will print strings without the " etc while 'write' will
write S-expressions that 'read' can read. We should be able to read JSON 
directly.

ELM uses ++ instead of & to concatenate.

Do we really need lists and vectors to be different things???

Easy to use threading, like goroutines, i.e.: go function() i.e. !! function()

Go interfaces - specifies only functions

In error messages,
should prettyprint instead, so instead of #(#defq, a, b) say a = b

#exit(n) sets return value, otherwise always zero?

Readline tab completion could perhaps understand "io." and more of syntax
