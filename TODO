
vector_set should give error if not undefined, just like assoc_set

If ++ is catenation, then +- could be replacements for vectors and assocs
Then -- could be to remove whatever...

Should array indexing be by () instead?

errors from normalize_q ??

#void should have something that suppresses further error messages

When pasting readline interprets TAB characters at start of line
Single ; should maybe be void?
Ranges as function arguments does not work. Maybe they should.

Enable in-line for #if
#if 0 // TODO enable...

GTK example-2 button 1 quits. Why?

1/2 + 1/3;

Restore end recursion  https://en.wikipedia.org/wiki/Tail_call

Haskell uses : as cons operator, TBD

Also: 35: instead of 35; is strange

Env is a structure with misc state info?

Quote should be on both sides? Practical?

OK? [] should continue parsing...

Functions within assocs must be able to refer to their own assoc

Suggest |-operator for replacements, so somewhat related to &.

Lists and assocs can also be used for functions. Skip [] operator?

[] is NIL, maybe also {} ??
Delay creation of assoc list?

Lists and vectors are the same, so drop lists (make it up to runtime to switch)

Invocations of eval still uses C stack, so still not proper end recursion

DO not have pair as a data type using :. Instead, : is a label data type (left side quoted).

Possibly implement semicolon as operator like C comma operator
Needs some refinement for sure

When array and assoc initialization is Json style,
how to separate a {} block in a program from an initialized assoc?

Json keys are always strings. Reserved names and types:
    null, true, false
    signed decimal number, including floats
    string
    array [] and comma-separated elements.
    associative array

{} is an empty assoc?
What is the difference between (){} for function and {} for assoc, really.
Try to nullify it. So in addition to { a : b }, we can also have { a }
which means? And { a ; b }

The ++ operator can update values in assocs? Probably | is better! What about vectors?
How to deal with duplicate keys on ++

Vector/list and function subscript is the same? So fib(0..10) returns a vector??

Fully implement function call without use of C stack

c_STRING8
c_STRING16
c_STRING24?
c_STRINGU // UTF8

Fully implement non-mutable 'variables'

TODO allow for byte order mark and other Unicode stuff in reader

Assoc keys can be symbols, integers. Or strings?

Have === operator in addition to ==. === corresponds to eq? in Scheme,
while == corresponds to eqv? (egual value). (There is no equal?)

In Scheme, 'display' will print strings without the " etc while 'write' will
write S-expressions that 'read' can read. We should be able to read JSON 
directly.

List functions: map

ELM and Haskell uses ++ instead of & to concatenate.

Easy to use threading, like goroutines, i.e.: go function() i.e. !! function()

Go interfaces - specifies only functions

In error messages,
should prettyprint instead, so instead of #(#defq, a, b) say a = b

Readline tab completion could perhaps understand "io." and more of syntax

Speed up env_progp-based loop etc

Improve GCD algorithm? Method of least absolute remainders https://en.wikipedia.org/wiki/Euclidean_algorithm

Should boolean be a separate type? May still make sense to refer to the same cells

Allow infinite as a number?

Compare strings with NUL (so use memcmp instead of strcmp)

TODO what to do about integer overflow? Convert to float?

#include("filename");

A continuation is also called a closure.
Funtional programming vz imperative.
Assocs are called Maps in Erlang.
Symbols can be called atoms

Maybe #length() should be some sort of operator? Hash?

Ellipsis (range) is 3 dots?

Div and mod as operators?

Write to stream instead of number2string-conversion, anv vv read from stream

How to deal with io etc. not being pure functions?
Mechanisms to deal with non-pure stuff:
      * https://en.wikipedia.org/wiki/Purely_functional_programming
      * Monads (Haskell +) https://en.wikipedia.org/wiki/Monad_(functional_programming)
      * I/O Monad https://en.wikipedia.org/wiki/Monad_(functional_programming)#IO_monad
      * https://en.wikipedia.org/wiki/Uniqueness_type (Clean)
      * https://en.wikipedia.org/wiki/Effect_system
      * Clojure ???
      * Declare as mutable (F#)
      * Erlang

Are symbols really functions that define the same value every time??

Float to int overflow detection
